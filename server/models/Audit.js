const mongoose = require("mongoose");

const auditSchema = new mongoose.Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "User",
    required: true,
  },
  parentAuditId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Audit",
    default: null,
  },
  websiteUrl: {
    type: String,
    required: true,
    trim: true,
  },
  overallScore: {
    type: Number,
    required: true,
    min: 0,
    max: 100,
  },
  performance: {
    score: { type: Number, min: 0, max: 100 },
    issues: [String],
    suggestions: [String],
    lighthouseScore: { type: Number, min: 0, max: 100 },
    loadTime: Number,
    firstPaint: Number,
    firstContentfulPaint: Number,
    coreWebVitals: {
      firstContentfulPaint: Number,
      largestContentfulPaint: Number,
      cumulativeLayoutShift: Number,
      firstInputDelay: Number,
      speedIndex: Number,
      totalBlockingTime: Number,
      timeToInteractive: Number,
    },
    opportunities: [
      {
        title: String,
        description: String,
        savings: Number,
      },
    ],
    metrics: {
      domContentLoaded: Number,
      loadComplete: Number,
      firstPaint: Number,
      firstContentfulPaint: Number,
      domInteractive: Number,
      redirectTime: Number,
      dnsTime: Number,
      tcpTime: Number,
      requestTime: Number,
      responseTime: Number,
    },
  },
  accessibility: {
    score: { type: Number, min: 0, max: 100 },
    issues: [String],
    suggestions: [String],
    lighthouseScore: { type: Number, min: 0, max: 100 },
    lighthouseIssues: [String],
  },
  seo: {
    score: { type: Number, min: 0, max: 100 },
    issues: [String],
    suggestions: [String],
    lighthouseScore: { type: Number, min: 0, max: 100 },
    lighthouseIssues: [String],
  },
  mobileFriendly: {
    score: { type: Number, min: 0, max: 100 },
    issues: [String],
    suggestions: [String],
  },
  technical: {
    score: { type: Number, min: 0, max: 100 },
    issues: [String],
    suggestions: [String],
  },
  content: {
    score: { type: Number, min: 0, max: 100 },
    issues: [String],
    suggestions: [String],
    topKeywords: [
      {
        keyword: String,
        count: Number,
        density: Number,
        type: String, // 'word', 'bigram', 'trigram'
      },
    ],
    wordCount: Number,
    characterCount: Number,
    sentenceCount: Number,
    paragraphCount: Number,
    readabilityScore: Number,
    keywordAnalysis: {
      titleKeywordMatch: Boolean,
      totalKeywords: Number,
      keywordDiversity: Number,
    },
    headingAnalysis: {
      h1Count: Number,
      h2Count: Number,
      h3Count: Number,
      h4Count: Number,
      h5Count: Number,
      h6Count: Number,
    },
    qualityIndicators: {
      hasLists: Boolean,
      hasQuestions: Boolean,
      hasNumbers: Boolean,
      hasLinks: Boolean,
      repetitivePhrases: Number,
    },
    freshnessAnalysis: {
      isRecent: Boolean,
      hasDates: Boolean,
      hasTimeReferences: Boolean,
    },
  },
  metaTags: {
    title: String,
    description: String,
    keywords: String,
    hasTitle: Boolean,
    hasDescription: Boolean,
    hasKeywords: Boolean,
    titleLength: Number,
    descriptionLength: Number,
  },
  images: {
    total: Number,
    withoutAlt: Number,
    oversized: Number,
    tooSmall: Number,
    lazyImages: Number,
    responsiveImages: Number,
    optimizedImages: Number,
    decorativeImages: Number,
    totalSizeKB: Number,
    avgSizeKB: Number,
    modernFormats: Number,
    issues: [String],
    suggestions: [String],
    list: [
      {
        src: String,
        alt: String,
        title: String,
        width: Number,
        height: Number,
        hasAlt: Boolean,
        isOversized: Boolean,
        isTooSmall: Boolean,
        aspectRatio: Number,
        estimatedSizeKB: Number,
        loading: String, // lazy, eager, auto
        altQuality: {
          score: Number,
          issues: [String],
          suggestions: [String],
          length: Number,
          wordCount: Number,
        },
        format: String,
        isResponsive: Boolean,
        hasLazyLoading: Boolean,
        isDecorative: Boolean,
        needsOptimization: Boolean,
      },
    ],
  },
  links: {
    total: Number,
    broken: Number,
    external: Number,
    internal: Number,
    anchor: Number,
    mailto: Number,
    tel: Number,
    javascript: Number,
    noFollow: Number,
    opensInNewTab: Number,
    insecure: Number,
    issues: [String],
    suggestions: [String],
    withoutTextCount: Number,
    withoutText: Array,
    list: [
      {
        href: String,
        text: String,
        title: String,
        rel: String,
        target: String,
        type: String, // internal, external, anchor, mailto, tel, javascript, data, blob
        isWorking: Boolean,
        statusCode: Number,
        redirectCount: Number,
        responseTime: Number,
        quality: {
          score: Number,
          issues: [String],
          suggestions: [String],
          hasDescriptiveText: Boolean,
          isAccessible: Boolean,
          textLength: Number,
          hasTitle: Boolean,
          isSecure: Boolean,
        },
        isAccessible: Boolean,
        hasDescriptiveText: Boolean,
        isExternal: Boolean,
        isInternal: Boolean,
        isAnchor: Boolean,
        isMailto: Boolean,
        isTel: Boolean,
        isJavaScript: Boolean,
        opensInNewTab: Boolean,
        hasNoFollow: Boolean,
        hasNoOpener: Boolean,
        hasNoReferrer: Boolean,
        finalUrl: String,
        errorMessage: String,
      },
    ],
    analysis: {
      totalLinks: Number,
      linkDensity: Number,
      averageLinkLength: Number,
      commonDomains: {},
      linkDistribution: {
        internal: Number,
        external: Number,
        anchor: Number,
        mailto: Number,
        tel: Number,
        javascript: Number,
      },
    },
  },
  pageSpeed: {
    loadTime: Number,
    firstContentfulPaint: Number,
    largestContentfulPaint: Number,
    cumulativeLayoutShift: Number,
    firstInputDelay: Number,
    speedIndex: Number,
    totalBlockingTime: Number,
    timeToInteractive: Number,
    issues: [String],
  },
  lighthouse: {
    performance: {
      score: Number,
      metrics: {
        firstContentfulPaint: Number,
        largestContentfulPaint: Number,
        cumulativeLayoutShift: Number,
        firstInputDelay: Number,
        speedIndex: Number,
        totalBlockingTime: Number,
        timeToInteractive: Number,
      },
      opportunities: [
        {
          title: String,
          description: String,
          savings: Number,
        },
      ],
    },
    accessibility: {
      score: Number,
      issues: [String],
    },
    seo: {
      score: Number,
      issues: [String],
    },
    bestPractices: {
      score: Number,
      issues: [String],
    },
  },
  createdAt: {
    type: Date,
    default: Date.now,
  },
  updatedAt: {
    type: Date,
    default: Date.now,
  },
});

// Index for efficient queries
auditSchema.index({ userId: 1, createdAt: -1 });
auditSchema.index({ websiteUrl: 1 });

module.exports = mongoose.model("Audit", auditSchema);
